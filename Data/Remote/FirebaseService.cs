using Firebase.Database;
using Firebase.Database.Query;
using MyToDo.Models;

namespace MyToDo.Data.Remote
{
    public class FirebaseService
    {
        private readonly FirebaseClient _firebase;

        public FirebaseService()
        {
            // **IMPORTANT:** Replace this with secure credential handling!
            string firebaseDatabaseUrl = "https://mytodo-XXXXX.firebaseio.com/"; //YOUR URL
            string firebaseSecret = "YOUR_FIREBASE_SECRET"; //YOUR KEY


            _firebase = new FirebaseClient(
                firebaseDatabaseUrl,
                new FirebaseOptions
                {
                    AuthTokenAsyncFactory = () => Task.FromResult(firebaseSecret)
                });
        }

        // Add a new task to Firebase
        public async Task<string> AddTaskAsync(TaskModel task)
        {
            var result = await _firebase
                .Child("tasks")
                .PostAsync(task);

            return result.Key; // Returns the unique key generated by Firebase
        }

        // Get all tasks from Firebase.
        public async Task<List<TaskModel>> GetAllTasksAsync()
        {
            var tasks = await _firebase
                .Child("tasks")
                .OnceAsync<TaskModel>();

            // Convert FirebaseObject<TaskModel> to List<TaskModel> and set FirebaseKey
            return tasks.Select(item =>
            {
                item.Object.FirebaseKey = item.Key;  // Store the Firebase key
                return item.Object;
            }).ToList();
        }

        // Update an existing task in Firebase
        public async Task UpdateTaskAsync(TaskModel task)
        {
            if (string.IsNullOrEmpty(task.FirebaseKey))
            {
                throw new ArgumentException("Task must have a FirebaseKey to be updated.");
            }

            await _firebase
                .Child("tasks")
                .Child(task.FirebaseKey)
                .PutAsync(task);
        }

        // Delete a task from Firebase
        public async Task DeleteTaskAsync(string firebaseKey)
        {
            if (string.IsNullOrEmpty(firebaseKey))
            {
                throw new ArgumentException("FirebaseKey must be provided to delete a task.");
            }

            await _firebase
                .Child("tasks")
                .Child(firebaseKey)
                .DeleteAsync();
        }
    }
}