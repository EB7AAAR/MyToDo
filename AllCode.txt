'''
using MyToDo.Views;

namespace MyToDo;

public partial class App : Application
{
    public App(TaskListView taskListView)
    {
        InitializeComponent();
        MainPage = new AppShell();
    }
}
'''

'''
using MyToDo.Views;

namespace MyToDo;

public partial class AppShell : Shell
{
    public AppShell()
    {
        InitializeComponent();
        Routing.RegisterRoute(nameof(AddTaskView), typeof(AddTaskView));
        Routing.RegisterRoute(nameof(EditTaskView), typeof(EditTaskView)); // Add this line

    }
}
'''

'''
using CommunityToolkit.Maui;
using Microsoft.Extensions.Logging;
using MyToDo.Data.Local;
using MyToDo.Data.Remote;
using MyToDo.ViewModels;
using MyToDo.Views;

namespace MyToDo;

public static class MauiProgram
{
    public static MauiApp CreateMauiApp()
    {
        var builder = MauiApp.CreateBuilder();
        builder
            .UseMauiApp<App>()
            .UseMauiCommunityToolkit()
            .ConfigureFonts(fonts =>
            {
                fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
                fonts.AddFont("OpenSans-Semibold.ttf", "OpenSansSemibold");
            });
        builder.Services.AddSingleton<FirebaseService>(); // Add this line
        // Register DatabaseContext
        string dbPath = Path.Combine(FileSystem.AppDataDirectory, "tasks.db3");
        builder.Services.AddSingleton(new DatabaseContext(dbPath));

        // Register ViewModels and Views
        builder.Services.AddSingleton<HomeViewModel>();
        builder.Services.AddSingleton<TaskListView>();
        builder.Services.AddTransient<AddTaskViewModel>();
        builder.Services.AddTransient<AddTaskView>();
        //Register EditTask
        builder.Services.AddTransient<EditTaskViewModel>();
        builder.Services.AddTransient<EditTaskView>();

#if DEBUG
        builder.Logging.AddDebug();
#endif

        return builder.Build();
    }
}

'''

'''
<?xml version = "1.0" encoding = "UTF-8" ?>
<Application xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:converters="clr-namespace:MyToDo.Converters"
             xmlns:local="clr-namespace:MyToDo"
             x:Class="MyToDo.App">
    <Application.Resources>
        <ResourceDictionary>
            <!-- Register the converter -->
            <converters:BoolToOpacityConverter x:Key="BoolToOpacityConverter" />
            <converters:StringToBoolConverter x:Key="StringToBoolConverter" />
            <converters:StringToIntConverter x:Key="StringToIntConverter" />
            <!-- Other resources -->
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Resources/Styles/Colors.xaml" />
                <ResourceDictionary Source="Resources/Styles/Styles.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>
'''

'''
<?xml version="1.0" encoding="UTF-8" ?>
<Shell x:Class="MyToDo.AppShell"
       xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
       xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
       xmlns:local="clr-namespace:MyToDo.Views"
       Shell.FlyoutBehavior="Disabled"
       Title="MyToDo">

    <ShellContent Title="Home"
                  ContentTemplate="{DataTemplate local:TaskListView}"
                  Route="MainPage" />

</Shell>
'''

'''
using System.Globalization;

namespace MyToDo.Converters
{
    public class BoolToOpacityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return (bool)value ? 0.5 : 1.0;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
'''

'''
using System.Globalization;

namespace MyToDo.Converters;

public class StringToBoolConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is string stringValue && parameter is string parameterString)
        {
            return stringValue != parameterString;
        }
        return true;
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        throw new NotImplementedException();
    }
}

'''

'''
using System.Globalization;

namespace MyToDo.Converters;

public class StringToIntConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is int intValue)
        {
            return intValue.ToString();
        }
        return "0"; // Default value
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is string stringValue && int.TryParse(stringValue, out int intValue))
        {
            return intValue;
        }
        return 0; // Default value if parsing fails
    }
}
'''

'''
using System.Globalization;
namespace MyToDo.Converters;
public class ThemeToColorConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is AppTheme theme)
        {
            if (theme == AppTheme.Dark)
            {
                return (Color)Application.Current.Resources["Gray950"]; // Dark theme color
            }
            else
            {
                return (Color)Application.Current.Resources["Gray200"]; // Light theme color
            }
        }
        return (Color)Application.Current.Resources["Gray200"]; // Default to light theme
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        throw new NotImplementedException(); // Not needed for this scenario
    }
}
'''

'''
// DatabaseContext.cs
using MyToDo.Models;
using SQLite;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Diagnostics;
using System;

namespace MyToDo.Data.Local
{
    public class DatabaseContext
    {
        private readonly SQLiteAsyncConnection _database;

        public DatabaseContext(string dbPath)
        {
            _database = new SQLiteAsyncConnection(dbPath);
            _database.CreateTableAsync<TaskModel>().Wait();
        }

        public async Task<List<TaskModel>> GetAllTasksAsync()
        {
            try
            {
                return await _database.Table<TaskModel>().ToListAsync();
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"---> Error in GetAllTasksAsync: {ex}");
                throw;
            }
        }
        //add this function
        public async Task<TaskModel> GetTaskByIdAsync(int taskId)
        {
            return await _database.Table<TaskModel>().FirstOrDefaultAsync(t => t.Id == taskId);
        }

        public async Task<int> AddTaskAsync(TaskModel task)
        {
            try
            {
                return await _database.InsertAsync(task);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"---> Error in AddTaskAsync: {ex}");
                throw;
            }
        }

        public async Task<int> UpdateTaskAsync(TaskModel task)
        {
            try
            {
                return await _database.UpdateAsync(task);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"---> Error in UpdateTaskAsync: {ex}");
                throw;
            }
        }

        public async Task<int> DeleteTaskAsync(TaskModel task)
        {
            try
            {
                return await _database.DeleteAsync(task);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"---> Error in DeleteTaskAsync: {ex}");
                throw;
            }
        }
    }
}
'''

'''
using Firebase.Database;
using Firebase.Database.Query;
using MyToDo.Models;

namespace MyToDo.Data.Remote
{
    public class FirebaseService
    {
        private readonly FirebaseClient _firebase;

        public FirebaseService()
        {
            // **IMPORTANT:** Replace this with secure credential handling!
            string firebaseDatabaseUrl = "https://mytodo-XXXXX.firebaseio.com/"; //YOUR URL
            string firebaseSecret = "YOUR_FIREBASE_SECRET"; //YOUR KEY


            _firebase = new FirebaseClient(
                firebaseDatabaseUrl,
                new FirebaseOptions
                {
                    AuthTokenAsyncFactory = () => Task.FromResult(firebaseSecret)
                });
        }

        // Add a new task to Firebase
        public async Task<string> AddTaskAsync(TaskModel task)
        {
            var result = await _firebase
                .Child("tasks")
                .PostAsync(task);

            return result.Key; // Returns the unique key generated by Firebase
        }

        // Get all tasks from Firebase.
        public async Task<List<TaskModel>> GetAllTasksAsync()
        {
            var tasks = await _firebase
                .Child("tasks")
                .OnceAsync<TaskModel>();

            // Convert FirebaseObject<TaskModel> to List<TaskModel> and set FirebaseKey
            return tasks.Select(item =>
            {
                item.Object.FirebaseKey = item.Key;  // Store the Firebase key
                return item.Object;
            }).ToList();
        }

        // Update an existing task in Firebase
        public async Task UpdateTaskAsync(TaskModel task)
        {
            if (string.IsNullOrEmpty(task.FirebaseKey))
            {
                throw new ArgumentException("Task must have a FirebaseKey to be updated.");
            }

            await _firebase
                .Child("tasks")
                .Child(task.FirebaseKey)
                .PutAsync(task);
        }

        // Delete a task from Firebase
        public async Task DeleteTaskAsync(string firebaseKey)
        {
            if (string.IsNullOrEmpty(firebaseKey))
            {
                throw new ArgumentException("FirebaseKey must be provided to delete a task.");
            }

            await _firebase
                .Child("tasks")
                .Child(firebaseKey)
                .DeleteAsync();
        }
    }
}
'''

'''
using CommunityToolkit.Mvvm.ComponentModel;
using SQLite;

namespace MyToDo.Models
{
    public abstract class BaseEntity : ObservableObject
    {
        [PrimaryKey, AutoIncrement]
        public int Id { get; set; }
        public DateTime CreatedDate { get; set; } = DateTime.Now;
        public DateTime? ModifiedDate { get; set; }
    }
}
'''

'''
namespace MyToDo.Models
{
    public class RecurrencePattern
    {
        public string Type { get; set; }
        public int Interval { get; set; }
    }
}
'''

'''
namespace MyToDo.Models
{
    public class Subtask
    {
        public string Description { get; set; }
        public bool IsCompleted { get; set; }
    }
}
'''

'''
using CommunityToolkit.Mvvm.ComponentModel;
using SQLite;
using System.Collections.Generic;
using System.Text.Json;
using System;

namespace MyToDo.Models
{
    public partial class TaskModel : BaseEntity
    {
        [ObservableProperty]
        private bool _isDragging;

        [ObservableProperty]
        private string _description;

        [ObservableProperty]
        private DateTime _dueDate;

        [ObservableProperty]
        private string _priority;

        [ObservableProperty]
        private string _category;

        public string FirebaseKey { get; set; }

        private RecurrencePattern _recurrence;

        [Ignore]
        public RecurrencePattern Recurrence
        {
            get => _recurrence;
            set
            {
                if (SetProperty(ref _recurrence, value))
                {
                    RecurrenceJson = JsonSerializer.Serialize(_recurrence);
                }
            }
        }

        [ObservableProperty] // This generates a RecurrenceJson property.
        private string _recurrenceJson;


        private List<Subtask> _subtasks = new();

        [Ignore]
        public List<Subtask> Subtasks
        {
            get => _subtasks;
            set
            {
                if (SetProperty(ref _subtasks, value))
                {
                    SubtasksJson = JsonSerializer.Serialize(_subtasks);
                }
            }
        }

        [ObservableProperty]
        private string _subtasksJson;
    }
}
'''

'''
// AddTaskViewModel.cs (Simplified for *adding* only)
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using MyToDo.Data.Local;
using MyToDo.Models;
using System.Collections.ObjectModel;
using System.Text.Json;

namespace MyToDo.ViewModels;

public partial class AddTaskViewModel : ObservableObject
{
    [ObservableProperty]
    private string _description;

    [ObservableProperty]
    private DateTime _dueDate = DateTime.Now;

    [ObservableProperty]
    private string _priority = "Medium";

    [ObservableProperty]
    private string _category;

    [ObservableProperty]
    private string _recurrenceType = "None";

    [ObservableProperty]
    private int _recurrenceInterval = 1;

    [ObservableProperty]
    private ObservableCollection<Subtask> _subtasks = new();

    private readonly DatabaseContext _databaseContext;

    public AddTaskViewModel(DatabaseContext databaseContext)
    {
        _databaseContext = databaseContext;
        AddSubtask(); // Start with one empty subtask
        Category = "Work";
    }
    [RelayCommand]
    private void AddSubtask()
    {
        Subtasks.Add(new Subtask { Description = "", IsCompleted = false });
    }

    [RelayCommand]
    private void RemoveSubtask(Subtask subtask)
    {
        Subtasks.Remove(subtask);
    }

    [RelayCommand]
    private async Task SaveTask()
    {
        RecurrencePattern recurrence = null;
        if (RecurrenceType != "None")
        {
            recurrence = new RecurrencePattern { Type = RecurrenceType, Interval = RecurrenceInterval };
        }

        // Create a new task (no _taskToEdit logic here)
        var newTask = new TaskModel
        {
            Description = Description,
            DueDate = DueDate,
            Priority = Priority,
            Category = Category,
            Recurrence = recurrence,
            SubtasksJson = JsonSerializer.Serialize(Subtasks)
        };

        await _databaseContext.AddTaskAsync(newTask);
        await Shell.Current.GoToAsync("..");
    }
}
'''

'''
// EditTaskViewModel.cs
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using MyToDo.Data.Local;
using MyToDo.Models;
using System.Collections.ObjectModel;
using System.Text.Json;
using System.Diagnostics;


namespace MyToDo.ViewModels;

public partial class EditTaskViewModel : ObservableObject, IQueryAttributable
{
    [ObservableProperty]
    private TaskModel _task;

    [ObservableProperty] private ObservableCollection<Subtask> _subtasks = new();


    private readonly DatabaseContext _databaseContext;

    public EditTaskViewModel(DatabaseContext databaseContext)
    {
        _databaseContext = databaseContext;

    }

    public async void ApplyQueryAttributes(IDictionary<string, object> query)
    {
        if (query.ContainsKey("taskId") && query["taskId"] is string taskIdString && int.TryParse(taskIdString, out int taskId))
        {
            await LoadTask(taskId);

        }
    }

    private async Task LoadTask(int taskId)
    {
        Task = await _databaseContext.GetTaskByIdAsync(taskId);

        if (Task == null)
        {
            // Handle case where task is not found (e.g., show error, navigate back)
            Debug.WriteLine($"---> Task with ID {taskId} not found.");
            await Shell.Current.GoToAsync(".."); // Or show an error message
            return;
        }

        //get subtasks from json and assign it to observalblecollection
        if (!string.IsNullOrEmpty(Task.SubtasksJson))
        {
            try
            {
                Subtasks = new ObservableCollection<Subtask>(JsonSerializer.Deserialize<List<Subtask>>(Task.SubtasksJson));
            }
            catch (JsonException ex)
            {
                Subtasks = new ObservableCollection<Subtask>();
                Debug.WriteLine($"---> Error deserializing subtasks: {ex.Message}");
            }
        }
        //load the receurrence
        if (!string.IsNullOrEmpty(Task.RecurrenceJson))
        {
            try
            {
                Task.Recurrence = JsonSerializer.Deserialize<RecurrencePattern>(Task.RecurrenceJson);
                OnPropertyChanged(nameof(Task)); // VERY IMPORTANT: Notify the UI
            }
            catch (JsonException ex)
            {
                Task.Recurrence = null; // Or handle as appropriate
                Debug.WriteLine($"---> Error deserializing RecurrenceJson: {ex.Message}");
            }

        }
        //if there is no recurence set the values by default
        else
        {
            Task.Recurrence = new() { Type = "None", Interval = 1 };
            OnPropertyChanged(nameof(Task)); // VERY IMPORTANT: Notify the UI

        }
    }

    [RelayCommand]
    private async Task SaveChanges()
    {
        if (Task == null) return;
        // Update the task
        Task.SubtasksJson = JsonSerializer.Serialize(Subtasks);
        //save recurrece
        Task.RecurrenceJson = JsonSerializer.Serialize(Task.Recurrence);
        await _databaseContext.UpdateTaskAsync(Task);
        await Shell.Current.GoToAsync("..");
    }

    [RelayCommand]
    private void AddSubtask()
    {
        Subtasks.Add(new Subtask { Description = "", IsCompleted = false });
    }

    [RelayCommand]
    private void RemoveSubtask(Subtask subtask)
    {
        if (subtask == null) return;
        Subtasks.Remove(subtask);
    }
}
'''

'''
// ViewModels/HomeViewModel.cs
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using MyToDo.Data.Local;
using MyToDo.Data.Remote;
using MyToDo.Models;
using MyToDo.Views;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Text.Json;

namespace MyToDo.ViewModels;

public partial class HomeViewModel : ObservableObject
{
    [ObservableProperty]
    private ObservableCollection<TaskModel> _tasks = new();

    [ObservableProperty]
    private bool _isBusy;

    [ObservableProperty]
    private string _errorMessage;

    private readonly DatabaseContext _databaseContext;
    private readonly FirebaseService _firebaseService;  // Keep this if you plan to use Firebase
    private bool _isLoaded = false;

    public HomeViewModel(DatabaseContext databaseContext, FirebaseService firebaseService)
    {
        _databaseContext = databaseContext;
        _firebaseService = firebaseService; // Keep this if you plan to use Firebase
    }

    public async Task LoadTasksAsync()
    {
        if (_isLoaded) return;

        IsBusy = true;
        _isLoaded = true;
        ErrorMessage = null;

        try
        {
            Tasks.Clear();
            var loadedTasks = await _databaseContext.GetAllTasksAsync();

            foreach (var task in loadedTasks)
            {
                if (!string.IsNullOrEmpty(task.SubtasksJson))
                {
                    try
                    {
                        task.Subtasks = JsonSerializer.Deserialize<List<Subtask>>(task.SubtasksJson);
                    }
                    catch (JsonException)
                    {
                        task.Subtasks = new List<Subtask>();
                        Debug.WriteLine($"---> Error deserializing subtasks for task ID {task.Id}");
                    }
                }
                Tasks.Add(task);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load tasks: {ex.Message}";
            Debug.WriteLine($"---> Error loading tasks: {ex}");
            await Shell.Current.DisplayAlert("Error", ErrorMessage, "OK");
        }
        finally
        {
            IsBusy = false;
        }
    }

    public void ResetIsLoaded()
    {
        _isLoaded = false;
    }

    [RelayCommand]
    private async Task AddTask()
    {
        ErrorMessage = null;
        await Shell.Current.GoToAsync(nameof(AddTaskView)); // No need to pass the ViewModel
    }

    [RelayCommand]
    private async Task GoToEditTask(TaskModel task)
    {
        if (task == null) return;
        ErrorMessage = null;

        // Use query parameters to pass the task ID
        await Shell.Current.GoToAsync($"{nameof(EditTaskView)}?taskId={task.Id}");
    }

    [RelayCommand]
    private async Task DeleteTask(TaskModel task)
    {
        if (task == null) return;
        ErrorMessage = null;
        try
        {
            await _databaseContext.DeleteTaskAsync(task);
            Tasks.Remove(task);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to Delete tasks: {ex.Message}";
            Debug.WriteLine($"---> Error Deleting tasks: {ex}");
            await Shell.Current.DisplayAlert("Error", ErrorMessage, "OK");
        }
    }

    private TaskModel _draggedTask;

    [RelayCommand]
    private void DragStarting(TaskModel task)
    {
        _draggedTask = task;
    }

    [RelayCommand]
    private void DropOver(TaskModel task)
    {
        // Could add visual feedback here (e.g., highlighting the drop target)
    }

    [RelayCommand]
    private void Drop(TaskModel dropTask)
    {
        if (_draggedTask == null || dropTask == null || ReferenceEquals(_draggedTask, dropTask))
        {
            return;
        }

        int dragIndex = Tasks.IndexOf(_draggedTask);
        int dropIndex = Tasks.IndexOf(dropTask);

        if (dragIndex == -1 || dropIndex == -1)
        {
            return;
        }

        Tasks.RemoveAt(dragIndex);
        Tasks.Insert(dropIndex, _draggedTask);

        _draggedTask = null;
    }
}
'''

'''
// AddTaskView.xaml.cs
using MyToDo.ViewModels;
using System.Threading.Tasks; // Make sure this is included

namespace MyToDo.Views;

public partial class AddTaskView : ContentPage
{
    public AddTaskView(AddTaskViewModel viewModel)
    {
        InitializeComponent();
        BindingContext = viewModel;
    }

    protected override async void OnAppearing()
    {
        base.OnAppearing();

        if (this.FindByName("DescriptionEditor") is Editor descriptionEditor)
        {
            // Add a short delay before focusing.  This is the key!
            await Task.Delay(100); // Delay for 100 milliseconds
            descriptionEditor.Focus();
        }
    }
}
'''

'''
// EditTaskView.xaml.cs
using MyToDo.ViewModels;

namespace MyToDo.Views;

public partial class EditTaskView : ContentPage
{
    public EditTaskView(EditTaskViewModel viewModel)
    {
        InitializeComponent();
        BindingContext = viewModel;
    }
}
'''

'''
// TaskListView.xaml.cs
using MyToDo.ViewModels;

namespace MyToDo.Views;

public partial class TaskListView : ContentPage
{
    public TaskListView(HomeViewModel viewModel)
    {
        InitializeComponent();
        BindingContext = viewModel;
    }

    protected override async void OnAppearing()
    {
        base.OnAppearing();

        if (BindingContext is HomeViewModel vm)
        {
            vm.ResetIsLoaded(); // Reset the flag BEFORE loading
            await vm.LoadTasksAsync(); // Reload data
        }
    }
}
'''

'''
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:viewmodel="clr-namespace:MyToDo.ViewModels"
             xmlns:converters="clr-namespace:MyToDo.Converters"
             xmlns:model="clr-namespace:MyToDo.Models"
             x:Class="MyToDo.Views.AddTaskView"
             Title="Add Task">

    <ScrollView>
        <VerticalStackLayout Padding="20"
                             Spacing="10">
            <!-- REMOVED: Title Entry -->

            <Label Text="Description:" />
            <Editor Text="{Binding Description}"
                    AutoSize="TextChanges"
                    x:Name="DescriptionEditor" />

            <Label Text="Due Date:" />
            <DatePicker Date="{Binding DueDate}" />

            <Label Text="Priority:" />
            <Picker SelectedItem="{Binding Priority}">
                <Picker.ItemsSource>
                    <x:Array Type="{x:Type x:String}">
                        <x:String>High</x:String>
                        <x:String>Medium</x:String>
                        <x:String>Low</x:String>
                    </x:Array>
                </Picker.ItemsSource>
            </Picker>

            <Label Text="Category:" />
            <!--<Picker ItemsSource="{Binding Categories}"
                    SelectedItem="{Binding Category}" />-->
            <Picker SelectedItem="{Binding Category}">
                <Picker.ItemsSource>
                    <x:Array Type="{x:Type x:String}">
                        <x:String>1st Circle Visits</x:String>
                        <x:String>2nd Circle Visits</x:String>
                        <x:String>Health</x:String>
                        <x:String>Work</x:String>
                    </x:Array>
                </Picker.ItemsSource>
            </Picker>

            <Label Text="Recurrence Type:" />
            <Picker SelectedItem="{Binding RecurrenceType}">
                <Picker.ItemsSource>
                    <x:Array Type="{x:Type x:String}">
                        <x:String>None</x:String>
                        <x:String>Daily</x:String>
                        <x:String>Weekly</x:String>
                        <x:String>Monthly</x:String>
                    </x:Array>
                </Picker.ItemsSource>
            </Picker>

            <Label Text="Recurrence Interval:" />
            <Entry Text="{Binding RecurrenceInterval, Converter={StaticResource StringToIntConverter}}"
                   Keyboard="Numeric" />

            <!-- Subtasks Section -->
            <Label Text="Subtasks:" />
            <CollectionView ItemsSource="{Binding Subtasks}">
                <CollectionView.ItemTemplate>
                    <DataTemplate x:DataType="model:Subtask">
                        <Grid ColumnDefinitions="Auto, *, Auto">
                            <CheckBox IsChecked="{Binding IsCompleted}" />
                            <Entry Grid.Column="1"
                                   Text="{Binding Description}"
                                   Placeholder="Subtask description" />
                            <Button Grid.Column="2"
                                    Text="-"
                                    Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:AddTaskViewModel}}, Path=RemoveSubtaskCommand}"
                                    CommandParameter="{Binding .}" />
                        </Grid>
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>
            <Button Text="+"
                    Command="{Binding AddSubtaskCommand}" />


            <Button Text="Save"
                    Command="{Binding SaveTaskCommand}" />

        </VerticalStackLayout>
    </ScrollView>
</ContentPage>
'''

'''
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:viewmodel="clr-namespace:MyToDo.ViewModels"
             xmlns:model="clr-namespace:MyToDo.Models"
             xmlns:converters="clr-namespace:MyToDo.Converters"
             x:Class="MyToDo.Views.EditTaskView"
             Title="Edit Task">
    <ScrollView>
        <VerticalStackLayout Padding="20"
                             Spacing="10">
            <Label Text="Description:" />
            <Editor Text="{Binding Task.Description}"
                    AutoSize="TextChanges" />

            <Label Text="Due Date:" />
            <DatePicker Date="{Binding Task.DueDate}" />

            <Label Text="Priority:" />
            <Picker SelectedItem="{Binding Task.Priority}">
                <Picker.ItemsSource>
                    <x:Array Type="{x:Type x:String}">
                        <x:String>High</x:String>
                        <x:String>Medium</x:String>
                        <x:String>Low</x:String>
                    </x:Array>
                </Picker.ItemsSource>
            </Picker>

            <Label Text="Category:" />
            <Picker SelectedItem="{Binding Task.Category}">
                <Picker.ItemsSource>
                    <x:Array Type="{x:Type x:String}">
                        <x:String>1st Circle Visits</x:String>
                        <x:String>2nd Circle Visits</x:String>
                        <x:String>Health</x:String>
                        <x:String>Work</x:String>
                    </x:Array>
                </Picker.ItemsSource>
            </Picker>

            <Label Text="Recurrence Type:" />
            <Picker SelectedItem="{Binding Task.Recurrence.Type}">
                <Picker.ItemsSource>
                    <x:Array Type="{x:Type x:String}">
                        <x:String>None</x:String>
                        <x:String>Daily</x:String>
                        <x:String>Weekly</x:String>
                        <x:String>Monthly</x:String>
                    </x:Array>
                </Picker.ItemsSource>
            </Picker>

            <Label Text="Recurrence Interval:" />
            <Entry Text="{Binding Task.Recurrence.Interval, Converter={StaticResource StringToIntConverter}}"
                   Keyboard="Numeric" />


            <!-- Subtasks Section -->
            <Label Text="Subtasks:" />
            <CollectionView ItemsSource="{Binding Subtasks}">
                <CollectionView.ItemTemplate>
                    <DataTemplate x:DataType="model:Subtask">
                        <Grid ColumnDefinitions="Auto, *, Auto">
                            <CheckBox IsChecked="{Binding IsCompleted}" />
                            <Entry Grid.Column="1"
                                   Text="{Binding Description}"
                                   Placeholder="Subtask description" />
                            <Button Grid.Column="2"
                                    Text="-"
                                    Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:EditTaskViewModel}}, Path=RemoveSubtaskCommand}"
                                    CommandParameter="{Binding .}" />
                        </Grid>
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>
            <Button Text="+"
                    Command="{Binding AddSubtaskCommand}" />

            <Button Text="Save Changes"
                    Command="{Binding SaveChangesCommand}" />
        </VerticalStackLayout>
    </ScrollView>
</ContentPage>
'''

'''
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:toolkit="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
             xmlns:viewmodel="clr-namespace:MyToDo.ViewModels"
             xmlns:model="clr-namespace:MyToDo.Models"
             xmlns:converters="clr-namespace:MyToDo.Converters"
             x:Class="MyToDo.Views.TaskListView"
             Title="My Tasks">

    <ContentPage.Resources>
        <ResourceDictionary>
            <toolkit:InvertedBoolConverter x:Key="BoolNegationConverter" />
            <converters:ThemeToColorConverter x:Key="ThemeToColorConverter" />
            <Style TargetType="Frame">
                <Setter Property="HasShadow"
                        Value="True" />
                <Setter Property="BorderColor">
                    <Setter.Value>
                        <Binding Source="{x:Static Application.Current}"
                                 Path="RequestedTheme"
                                 Converter="{StaticResource ThemeToColorConverter}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="CornerRadius"
                        Value="8" />
                <Setter Property="Margin"
                        Value="10,5,10,5" />
            </Style>
        </ResourceDictionary>
    </ContentPage.Resources>

    <Grid RowDefinitions="Auto, *">
        <Button Text="Add Task"
                Command="{Binding AddTaskCommand}"
                Margin="10"
                Grid.Row="0" />

        <Grid Grid.Row="1">
            <ActivityIndicator IsRunning="{Binding IsBusy}"
                               IsVisible="{Binding IsBusy}"
                               HorizontalOptions="Center"
                               VerticalOptions="Center" />

            <CollectionView ItemsSource="{Binding Tasks}"
                            IsVisible="{Binding IsBusy, Converter={StaticResource BoolNegationConverter}}">

                <CollectionView.EmptyView>
                    <StackLayout Padding="20"
                                 HorizontalOptions="Center"
                                 VerticalOptions="Center">
                        <Label Text="No tasks yet.  Tap 'Add Task' to create one."
                               HorizontalTextAlignment="Center" />
                    </StackLayout>
                </CollectionView.EmptyView>

                <CollectionView.ItemTemplate>
                    <DataTemplate x:DataType="model:TaskModel">
                        <Frame Padding="0">
                            <toolkit:Expander>
                                <toolkit:Expander.Header>
                                    <Grid ColumnDefinitions="*, Auto, Auto"
                                          Padding="10"
                                          BackgroundColor="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource PrimaryDark}}">
                                        <!-- DragGestureRecognizer is now on the Header's Grid -->
                                        <Grid.GestureRecognizers>
                                            <DragGestureRecognizer DragStartingCommand="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:HomeViewModel}}, Path=DragStartingCommand}"
                                                                   DragStartingCommandParameter="{Binding .}" />
                                        </Grid.GestureRecognizers>
                                        <Label Text="{Binding Description}"
                                               FontSize="18"
                                               FontAttributes="Bold"
                                               TextColor="{AppThemeBinding Light=White, Dark={StaticResource PrimaryDarkText}}"
                                               VerticalOptions="Center" />
                                        <Label Text="{Binding DueDate, StringFormat='{0:M/d}'}"
                                               FontSize="14"
                                               TextColor="{AppThemeBinding Light=White, Dark={StaticResource PrimaryDarkText}}"
                                               Grid.Column="1"
                                               VerticalOptions="Center" />
                                        <Image Source="expand_more.png"
                                               Grid.Column="2"
                                               HeightRequest="20"
                                               WidthRequest="20">
                                            <Image.Triggers>
                                                <DataTrigger TargetType="Image"
                                                             Binding="{Binding Source={RelativeSource AncestorType={x:Type toolkit:Expander}}, Path=IsExpanded}"
                                                             Value="True">
                                                    <Setter Property="Source"
                                                            Value="expand_less.png" />
                                                </DataTrigger>
                                            </Image.Triggers>
                                        </Image>
                                    </Grid>
                                </toolkit:Expander.Header>

                                <toolkit:Expander.Content>
                                    <Grid RowDefinitions="Auto, Auto, Auto"
                                          ColumnDefinitions="*, Auto, Auto"
                                          Padding="10"
                                          BackgroundColor="{AppThemeBinding Light={StaticResource Secondary}, Dark={StaticResource Gray600}}">
                                        <!--Changed Row and Column Definitions-->


                                        <!-- Subtasks Section -->
                                        <CollectionView ItemsSource="{Binding Subtasks}"
                                                        Grid.Row="0"
                                                        Grid.ColumnSpan="3"
                                                        Margin="0">
                                            <!-- Reduced margin -->
                                            <CollectionView.ItemTemplate>
                                                <DataTemplate x:DataType="model:Subtask">
                                                    <Grid ColumnDefinitions="Auto, *"
                                                          Padding="0"
                                                          RowSpacing="0">
                                                        <!-- Reduced padding -->
                                                        <CheckBox IsChecked="{Binding IsCompleted}"
                                                                  VerticalOptions="Center"
                                                                  Margin="0" />
                                                        <!-- Removed extra margin -->
                                                        <Label Text="{Binding Description}"
                                                               Grid.Column="1"
                                                               VerticalOptions="Center"
                                                               TextColor="{AppThemeBinding Light=Black, Dark=White}" />
                                                    </Grid>
                                                </DataTemplate>
                                            </CollectionView.ItemTemplate>
                                        </CollectionView>

                                        <!-- Task Details -->
                                        <VerticalStackLayout Grid.Row="1"
                                                             Grid.Column="0"
                                                             Grid.ColumnSpan="2"
                                                             Margin="10,0,0,0"
                                                             Spacing="5">
                                            <!--Wrapping Labels in StackLayouts. -->
                                            <Label Text="{Binding Category, StringFormat='Category: {0}'}"
                                                   FontSize="14"
                                                   TextColor="{AppThemeBinding Light=Black, Dark=White}" />

                                            <Label Text="{Binding Priority, StringFormat='Priority: {0}'}"
                                                   FontSize="14"
                                                   TextColor="{AppThemeBinding Light=Black, Dark=White}" />

                                            <Label Text="{Binding CreatedDate, StringFormat='Created: {0:M/d/yyyy}'}"
                                                   FontSize="12"
                                                   TextColor="{AppThemeBinding Light=Black, Dark=White}" />
                                            <!--For Row 3: Recurrence-->
                                            <!--
                                        <StackLayout Orientation="Horizontal">
                                            
                                            <Label Text="{Binding Recurrence.Type, StringFormat='Recurs: {0}'}"
                                                   FontSize="14"
                                                   TextColor="{AppThemeBinding Light=Black, Dark=White}" />
                                            <Label Text="{Binding Recurrence.Interval, StringFormat='Every: {0}'}"
                                                   IsVisible="{Binding Recurrence.Type, Converter={StaticResource StringToBoolConverter}, ConverterParameter='None'}"
                                                   FontSize="14"
                                                   TextColor="{AppThemeBinding Light=Black, Dark=White}" />
                                        </StackLayout>
                                        -->


                                        </VerticalStackLayout>
                                        <HorizontalStackLayout Grid.Row="1"
                                                               Grid.Column="2"
                                                               Spacing="10">
                                            <!-- Edit Button -->
                                            <Border Stroke="Black"
                                                    StrokeThickness="2"
                                                    Padding="5,0"
                                                    HeightRequest="50"
                                                    WidthRequest="50"
                                                    VerticalOptions="End"
                                                    HorizontalOptions="End">
                                                <Border.StrokeShape>
                                                    <RoundRectangle CornerRadius="5" />
                                                </Border.StrokeShape>
                                                <ImageButton Source="edit.png"
                                                             Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:HomeViewModel}}, Path=GoToEditTaskCommand}"
                                                             CommandParameter="{Binding .}"
                                                             BackgroundColor="Transparent" />
                                            </Border>
                                            <!-- Smaller FontSize -->
                                            <!-- Delete Button -->
                                            <Border Stroke="Black"
                                                    StrokeThickness="2"
                                                    HeightRequest="50"
                                                    WidthRequest="50"
                                                    Padding="5,0"
                                                    VerticalOptions="End"
                                                    HorizontalOptions="End">
                                                <Border.StrokeShape>
                                                    <RoundRectangle CornerRadius="5" />
                                                </Border.StrokeShape>
                                                <ImageButton Source="delete.png"
                                                             Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:HomeViewModel}}, Path=DeleteTaskCommand}"
                                                             CommandParameter="{Binding}"
                                                             BackgroundColor="Transparent" />
                                            </Border>
                                            <!-- Smaller FontSize -->
                                        </HorizontalStackLayout>

                                    </Grid>
                                </toolkit:Expander.Content>
                            </toolkit:Expander>
                            <!-- DropGestureRecognizer remains on the Frame -->
                            <Frame.GestureRecognizers>
                                <DropGestureRecognizer AllowDrop="True"
                                                       DropCommand="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:HomeViewModel}}, Path=DropCommand}"
                                                       DropCommandParameter="{Binding .}"
                                                       DragOverCommand="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:HomeViewModel}}, Path=DropOverCommand}"
                                                       DragOverCommandParameter="{Binding .}" />
                            </Frame.GestureRecognizers>
                        </Frame>

                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>
        </Grid>
    </Grid>
</ContentPage>
'''

